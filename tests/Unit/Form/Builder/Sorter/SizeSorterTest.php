<?php

declare(strict_types=1);

namespace Setono\SyliusMeilisearchPlugin\Tests\Unit\Form\Builder\Sorter;

use PHPUnit\Framework\TestCase;
use Setono\SyliusMeilisearchPlugin\Form\Builder\Sorter\SizeSorter;

final class SizeSorterTest extends TestCase
{
    public function testItSortsChoices(): void
    {
        $randomizeChoices = $this->getChoices();

        $sortedChoices = (new SizeSorter())->sort($randomizeChoices);

        self::assertSame($this->getSortedChoices(), $sortedChoices);
    }

    public function testItSortsChoiceWithAdditionalElements(): void
    {
        $choices = ['XL' => 'XL', 'S' => 'S', 'M' => 'M', 'XXXL' => 'XXXL', 'L' => 'L', 'XXL' => 'XXL'];

        self::assertSame(
            ['S' => 'S', 'M' => 'M', 'L' => 'L', 'XL' => 'XL', 'XXL' => 'XXL', 'XXXL' => 'XXXL'],
            (new SizeSorter())->sort($choices),
        );
    }

    public function testItSortsChoiceOmittingNonExistentTemplateElements(): void
    {
        $choices = ['M' => 'M', 'S' => 'S', 'L' => 'L'];

        self::assertSame(
            ['S' => 'S', 'M' => 'M', 'L' => 'L'],
            (new SizeSorter())->sort($choices),
        );
    }

    private function getChoices(): array
    {
        return [
            'XS' => 'XS',
            'S' => 'S',
            'M' => 'M',
            'L' => 'L',
            'XL' => 'XL',
            'XXL' => 'XXL',
            'XXXL' => 'XXXL',
            '40' => '40',
            '41' => '41',
            '42' => '42',
            '43' => '43',
            '44' => '44',
            '45' => '45',
            '46' => '46',
            '48' => '48',
            '50' => '50',
            '52' => '52',
            '54' => '54',
            '56' => '56',
            'XXS' => 'XXS',
            '4XL' => '4XL',
            '34/36' => '34/36',
            '38/32' => '38/32',
            '34/30' => '34/30',
            '38/34' => '38/34',
            '33/36' => '33/36',
            'S/M' => 'S/M',
            '36/36' => '36/36',
            '27/30' => '27/30',
            '27/32' => '27/32',
            '32/36' => '32/36',
            '31/36' => '31/36',
            'L/XL' => 'L/XL',
            '28/34' => '28/34',
            '40 - 47' => '40 - 47',
            '36/30' => '36/30',
            'M/L' => 'M/L',
            '36/34' => '36/34',
            '29/34' => '29/34',
            '33/30' => '33/30',
            '33/34' => '33/34',
            'ONE SIZE' => 'ONE SIZE',
            '29/32' => '29/32',
            '30/32' => '30/32',
            '31/32' => '31/32',
            '28/30' => '28/30',
            '33/32' => '33/32',
            '34/32' => '34/32',
            '32/34' => '32/34',
            '32/32' => '32/32',
            '34/34' => '34/34',
            '29/30' => '29/30',
            '36/32' => '36/32',
            '31/34' => '31/34',
            '30/34' => '30/34',
            '31/30' => '31/30',
            '28/32' => '28/32',
            '30/30' => '30/30',
            '32/30' => '32/30',
            '44,5' => '44,5',
            '45.5' => '45.5',
            '8' => '8',
            '9' => '9',
            '10' => '10',
            '11' => '11',
            '12' => '12',
            '28' => '28',
            '29' => '29',
            '30' => '30',
            '31' => '31',
            '32' => '32',
            '33' => '33',
            '34' => '34',
            '36' => '36',
            '38' => '38',
            '58' => '58',
            '85' => '85',
            '90' => '90',
            '95' => '95',
            '105' => '105',
            'XS/S' => 'XS/S',
        ];
    }

    private function getSortedChoices(): array
    {
        return [
            'XXS' => 'XXS',
            'XS' => 'XS',
            'XS/S' => 'XS/S',
            'S' => 'S',
            'S/M' => 'S/M',
            'M' => 'M',
            'M/L' => 'M/L',
            'L' => 'L',
            'L/XL' => 'L/XL',
            'XL' => 'XL',
            'XXL' => 'XXL',
            'XXXL' => 'XXXL',
            '8' => '8',
            '9' => '9',
            '10' => '10',
            '11' => '11',
            '12' => '12',
            '27/30' => '27/30',
            '27/32' => '27/32',
            '28/30' => '28/30',
            '28/32' => '28/32',
            '28/34' => '28/34',
            '28' => '28',
            '29/30' => '29/30',
            '29/32' => '29/32',
            '29/34' => '29/34',
            '29' => '29',
            '30/30' => '30/30',
            '30/32' => '30/32',
            '30/34' => '30/34',
            '30' => '30',
            '31/30' => '31/30',
            '31/32' => '31/32',
            '31/34' => '31/34',
            '31/36' => '31/36',
            '31' => '31',
            '32/30' => '32/30',
            '32/32' => '32/32',
            '32/34' => '32/34',
            '32/36' => '32/36',
            '32' => '32',
            '33/30' => '33/30',
            '33/32' => '33/32',
            '33/34' => '33/34',
            '33/36' => '33/36',
            '33' => '33',
            '34/30' => '34/30',
            '34/32' => '34/32',
            '34/34' => '34/34',
            '34/36' => '34/36',
            '34' => '34',
            '36/30' => '36/30',
            '36/32' => '36/32',
            '36/34' => '36/34',
            '36/36' => '36/36',
            '36' => '36',
            '38/32' => '38/32',
            '38/34' => '38/34',
            '38' => '38',
            '40' => '40',
            '40 - 47' => '40 - 47',
            '41' => '41',
            '42' => '42',
            '43' => '43',
            '44' => '44',
            '44,5' => '44,5',
            '45' => '45',
            '45.5' => '45.5',
            '46' => '46',
            '48' => '48',
            '50' => '50',
            '52' => '52',
            '54' => '54',
            '56' => '56',
            '58' => '58',
            '85' => '85',
            '90' => '90',
            '95' => '95',
            '105' => '105',
            '4XL' => '4XL',
            'ONE SIZE' => 'ONE SIZE',
        ];
    }
}
